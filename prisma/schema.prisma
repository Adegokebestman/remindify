datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  level         Int        @default(1)
  experience    Int        @default(0)
  streak        Int        @default(0)
  onboardingCompleted Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  reminders     Reminder[]
  habits        Habit[]
  achievements  Achievement[]
  suggestionFeedback SuggestionFeedback[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reminder {
  id          String   @id @default(cuid())
  userId      String
  title       String
  category    String
  tags        String[]
  date        String
  time        String
  recurring   String
  sound       String?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Habit {
  id             String   @id @default(cuid())
  userId         String
  title          String
  frequency      Int
  completedDates String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  type        String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model SuggestionFeedback {
  id           String   @id @default(cuid())
  userId       String
  suggestionId String
  isPositive   Boolean
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
}

